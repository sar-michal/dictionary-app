package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"fmt"
	"strconv"

	"github.com/sar-michal/dictionary-app/graph/model"
)

// CreateWord is the resolver for the createWord field.
func (r *mutationResolver) CreateWord(ctx context.Context, polishWord string) (*model.Word, error) {
	word, err := r.Repo.GetOrCreateWord(polishWord)
	if err != nil {
		return nil, fmt.Errorf("failed to create word: %w", err)
	}
	return convertWord(word), nil
}

// UpdateWord is the resolver for the updateWord field.
func (r *mutationResolver) UpdateWord(ctx context.Context, wordID string, newPolishWord string) (*model.Word, error) {
	id, err := strconv.ParseUint(wordID, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("invalid wordID: %w", err)
	}

	word, err := r.Repo.UpdateWord(uint(id), newPolishWord)
	if err != nil {
		return nil, fmt.Errorf("failed to update word: %w", err)
	}
	return convertWord(word), nil
}

// DeleteWord is the resolver for the deleteWord field.
func (r *mutationResolver) DeleteWord(ctx context.Context, wordID string) (bool, error) {
	id, err := strconv.ParseUint(wordID, 10, 64)
	if err != nil {
		return false, fmt.Errorf("invaild wordID: %w", err)
	}

	if err := r.Repo.DeleteWord(uint(id)); err != nil {
		return false, fmt.Errorf("failed to delete word: %w", err)
	}
	return true, nil
}

// CreateTranslationWithWord is the resolver for the createTranslationWithWord field.
func (r *mutationResolver) CreateTranslationWithWord(ctx context.Context, polishWord string, englishTranslation string, exampleSentences []string) (*model.Translation, error) {
	panic(fmt.Errorf("not implemented: CreateTranslationWithWord - createTranslationWithWord"))
}

// CreateTranslation is the resolver for the createTranslation field.
func (r *mutationResolver) CreateTranslation(ctx context.Context, wordID string, englishTranslation string, exampleSentences []string) (*model.Translation, error) {
	panic(fmt.Errorf("not implemented: CreateTranslation - createTranslation"))
}

// UpdateTranslation is the resolver for the updateTranslation field.
func (r *mutationResolver) UpdateTranslation(ctx context.Context, translationID string, newEnglishTranslation string) (*model.Translation, error) {
	panic(fmt.Errorf("not implemented: UpdateTranslation - updateTranslation"))
}

// DeleteTranslation is the resolver for the deleteTranslation field.
func (r *mutationResolver) DeleteTranslation(ctx context.Context, translationID string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTranslation - deleteTranslation"))
}

// CreateExampleSentence is the resolver for the createExampleSentence field.
func (r *mutationResolver) CreateExampleSentence(ctx context.Context, translationID string, sentenceText string) (*model.ExampleSentence, error) {
	panic(fmt.Errorf("not implemented: CreateExampleSentence - createExampleSentence"))
}

// UpdateExampleSentence is the resolver for the updateExampleSentence field.
func (r *mutationResolver) UpdateExampleSentence(ctx context.Context, sentenceID string, newSentenceText string) (*model.ExampleSentence, error) {
	panic(fmt.Errorf("not implemented: UpdateExampleSentence - updateExampleSentence"))
}

// DeleteExampleSentence is the resolver for the deleteExampleSentence field.
func (r *mutationResolver) DeleteExampleSentence(ctx context.Context, sentenceID string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteExampleSentence - deleteExampleSentence"))
}

// Words is the resolver for the words field.
func (r *queryResolver) Words(ctx context.Context) ([]*model.Word, error) {
	words, err := r.Repo.ListWords()
	if err != nil {
		return nil, fmt.Errorf("failed to list words: %w", err)
	}

	gqlWords := make([]*model.Word, len(words))
	for i, w := range words {
		gqlWords[i] = convertWord(&w)
	}
	return gqlWords, nil
}

// WordByPolish is the resolver for the wordByPolish field.
func (r *queryResolver) WordByPolish(ctx context.Context, polishWord string) (*model.Word, error) {
	word, err := r.Repo.GetWordByPolish(polishWord)
	if err != nil {
		return nil, fmt.Errorf("failed to get word by polish: %w", err)
	}
	return convertWord(word), nil
}

// WordByID is the resolver for the wordByID field.
func (r *queryResolver) WordByID(ctx context.Context, wordID string) (*model.Word, error) {
	id, err := strconv.ParseUint(wordID, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("invalid wordID: %w", err)
	}

	word, err := r.Repo.GetWordByID(uint(id))
	if err != nil {
		return nil, fmt.Errorf("failed to get word by id: %w", err)
	}
	return convertWord(word), nil
}

// Translations is the resolver for the translations field.
func (r *queryResolver) Translations(ctx context.Context, wordID string) ([]*model.Translation, error) {
	panic(fmt.Errorf("not implemented: Translations - translations"))
}

// TranslationByID is the resolver for the translationByID field.
func (r *queryResolver) TranslationByID(ctx context.Context, translationID string) (*model.Translation, error) {
	panic(fmt.Errorf("not implemented: TranslationByID - translationByID"))
}

// ExampleSentences is the resolver for the exampleSentences field.
func (r *queryResolver) ExampleSentences(ctx context.Context, translationID string) ([]*model.ExampleSentence, error) {
	panic(fmt.Errorf("not implemented: ExampleSentences - exampleSentences"))
}

// ExampleSentenceByID is the resolver for the exampleSentenceByID field.
func (r *queryResolver) ExampleSentenceByID(ctx context.Context, sentenceID string) (*model.ExampleSentence, error) {
	panic(fmt.Errorf("not implemented: ExampleSentenceByID - exampleSentenceByID"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
